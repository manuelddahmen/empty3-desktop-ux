plugins {
    id("application") // enabling the plugin here
    id("java")
    id 'java-library'
    id 'maven-publish'
    id 'org.jreleaser' version '1.14.0'
    id 'signing'
    id 'org.jetbrains.kotlin.jvm' version "2.2.0-RC"
//    id 'com.google.cloud.functions-framework' version '0.6.0'
}
//"empty3-desktop-ux"

group = 'one.empty3'
var version_date = '2025.9.1'

var JAVA_VERSION = 21

kotlin {
    jvmToolchain(JAVA_VERSION)
}
sourceCompatibility = JAVA_VERSION
targetCompatibility = JAVA_VERSION

tasks.withType(JavaCompile).configureEach {
    options.release = JAVA_VERSION
}

configurations {
    desktopCompile
    androidCompile

    compileOnly.extendsFrom desktopCompile
    testCompile.extendsFrom desktopCompile // Assuming tests run on the desktop

    desktop {
        extendsFrom desktopCompile
        //extendsFrom runtime
    }
    android {
        extendsFrom androidCompile
        //extendsFrom runtime
    }
}

sourceSets {
    main {
        java {
            srcDirs 'src/main/java'
            srcDirs 'src/test/java'
        }
        resources {
            srcDirs "src/main/resources", "src/main/configs", "src/main/java"
        }
    }
    test {
        java {
            srcDirs 'src/test/java'
            srcDirs 'src/main/java'
        }
        resources {
            srcDirs "src/test/resources", "src/test/configs", "src/test/java"
        }
        mainClasses {
            "one.empty3.library1.tree.TestStringAnalyzer5"
            "one.empty3.library1.tree.TestStringAnalyzer7"
            "one.empty3.library1.tree.TestAlgebraicTreeVector"
        }
    }
    main.kotlin.srcDirs += 'src/main/kotlin'
    main.kotlin.srcDirs += 'src/main/java'
    test.kotlin.srcDirs += 'test/main/kotlin'
    test.kotlin.srcDirs += 'test/main/java'
    test.java.srcDirs += 'src/test/java'
    test.java.srcDirs += 'src/main/java'
}

configurations {
    all*.exclude group: 'one.empty3.libs', module: 'partial-android'
}

//kotlin {
//macosX64('native') { // on macOS
// linuxX64('native') // on Linux
//    mingwX64('native') // on Windows
//        binaries {
//            executable()
//        }
//}

Properties properties = new Properties()
try {
    // Other configuration here
    File propertiesFile = new File('../private.properties/gradle.properties')
    propertiesFile.withInputStream {
        properties.load(it)
    }
} catch (Exception ex) {
    ex.printStackTrace()
}


Properties propertiesReleaseConfig = new Properties()
try {
    // Other configuration here
    File propertiesFile = new File('C:\\Users\\manue\\.jreleaser\\config.properties')
    propertiesFile.withInputStream {
        propertiesReleaseConfig.load(it)
    }
} catch (Exception ex) {
    ex.printStackTrace()
    try {
        // Other configuration here
        File propertiesFile = new File('../.jreleaser/config.properties')
        propertiesFile.withInputStream {
            propertiesReleaseConfig.load(it)
        }
        } catch (Exception ex1) {
        ex1.printStackTrace()
        }
    }
test.onlyIf { !project.hasProperty('skipTestFromBuild') }

tasks.register('copyDeps', Copy) {
    from(configurations.compile + configurations.testCompile) {
        include "**/*.jar"
        include "**/*.xml"
        include "**/*.properties"
        include "**/*.dll"
        include "**/*.so"
    }
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
}
jar {
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
}
def load = properties
java {
    withSourcesJar()
}

tasks.register('FaceDetect', JavaExec) {
    group = "execution"
    description = "Run the main class with Face on Face"
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'one.empty3.apps.facedetect.JFrameEditPolygonsMappings'
}
tasks.register('Game', JavaExec) {
    group = "execution"
    description = "Run the main class with JavaExecTask"
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'one.empty3.apps.opad.PanelGraphics'
}

tasks.register('runFunctionsFramework', JavaExec) {
    group = 'Execution'
    description = 'Starts the Functions Framework server for local testing'
    mainClass = 'com.google.cloud.functions.framework.FunctionsFramework'
    classpath = sourceSets.main.runtimeClasspath
    args = [
            '--target', 'one.empty3.apps.facedetect.gcp.ImageProcessor', // Your HttpFunction class name
            '--port', '8080' // Change the port if necessary
    ]
    standardInput = System.in
}
configurations {
    invoker
}


tasks.register("runFunction", JavaExec) {
    main = 'com.google.cloud.functions.invoker.runner.Invoker'
    classpath(configurations.invoker)
    inputs.files(configurations.runtimeClasspath, sourceSets.main.output)
    args(
            '--target', project.findProperty('run.functionTarget')?:'one.empty3.apps.facedetect.gcp.ImageProcessor',
            '--port', project.findProperty('run.port') ?: 8081
    )
    doFirst {
        args('--classpath', files(configurations.runtimeClasspath, sourceSets.main.output).asPath)
    }
}

tasks.register('RunClass', JavaExec) {
    classpath sourceSets.main.runtimeClasspath
    mainClass = 'one.empty3.test.tests.test4.Balade1'
    args 'one.empty3.test.tests.test4.Balade1'
    dependsOn(jar)
}




tasks.register('deployCloudFunction', Exec) {
//define variables that you want to use
    def buildDirJars = 'build/libs'
    def functionName = "create-texture-function"
    def fullyQualifiedEntryPoint = 'one.empty3.apps.facedetect.gcp.ImageProcessor'
    def jarFileName = "*"
    commandLine "gcloud", "functions", "deploy", "$functionName",
            "--runtime", "java22",
            "--trigger-http",
            "--entry-point", "$fullyQualifiedEntryPoint",
            "--source", "$buildDirJars/$jarFileName",
            // Add any other necessary gcloud options here, such as memory settings, etc.

            // Set environment variables if needed
            environment("GOOGLE_APPLICATION_CREDENTIALS", "/path/to/your/credentials.json")
}




//gradle runFunction -Prun.functionTarget=one.empty3.apps.facedetect.gcp.ImageProcessor  -Prun.port=8080
//java --classpath 'build/libs' --target one.empty3.apps.facedetect.gcp.ImageProcessor com.google.cloud.functions.invoker.runner.Invoker
kotlin {
    jvmToolchain(JAVA_VERSION)
}
sourceCompatibility = JAVA_VERSION
targetCompatibility = JAVA_VERSION

tasks.withType(JavaCompile).configureEach {
    options.release = JAVA_VERSION
}

dependencies {
    implementation 'one.empty3.libs:partial-desktop:0.0.31'
    implementation 'one.empty3.libs:commons-mp:0.0.11'
    implementation 'one.empty3:empty3-library-mp:2025.9.1'
    implementation 'com.google.cloud:google-cloud-pubsub:1.133.1' // Check for the latest version
    implementation 'com.google.cloud:google-cloud-tasks:2.59.0'
    implementation 'com.google.cloud.functions:functions-framework-api:1.1.0'
    invoker 'com.google.cloud.functions.invoker:java-function-invoker:1.1.0'
    implementation 'com.google.code.gson:gson:2.10.1' //if you use gson
    implementation 'com.google.cloud:libraries-bom:26.49.0'
    //testImplementation 'org.junit.platform:junit-platform-launcher:1.9.2'
    //testImplementation platform('org.junit:junit-bom:5.10.3')
    implementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.12.0'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.2'
    testImplementation 'org.junit.platform:junit-platform-launcher:1.9.2'
    implementation group: 'org.mockito', name: 'mockito-core', version: '5.15.2'
    implementation group: 'org.mockito', name: 'mockito-junit-jupiter', version: '5.15.2'
  //  implementation platform('org.junit:junit-bom:5.10.3')
    //  implementation 'org.junit.jupiter:junit-jupiter:5.9.2'
    implementation 'junit:junit:4.13.2'
    implementation group: 'org.junit', name: 'junit5-api', version: '5.0.0-ALPHA'
    implementation("com.github.sarxos:webcam-capture:0.3.12")
    implementation group: 'commons-net', name: 'commons-net', version: '3.9.0'
    implementation("org.jdom:jdom2:2.0.6.1")
    implementation("xom:xom:1.3.9")
    implementation 'org.apache.groovy:groovy:4.0.14'
    def jogl = '2.3.2'
    implementation "org.jogamp.jogl:jogl-all:$jogl"
    implementation group: 'org.jogamp.gluegen', name: 'gluegen-rt-main', version: "$jogl"
    implementation group: 'org.jogamp.jogl', name: 'jogl-all-main', version: "$jogl"
    implementation("com.jgoodies:jgoodies-common:1.8.1")
    implementation("com.jgoodies:jgoodies-forms:1.9.0")
    implementation 'com.formdev:flatlaf:3.0'
    implementation 'com.jetbrains.intellij.java:java-gui-forms-rt:203.7148.30'
    implementation("com.miglayout:miglayout:3.7.4")
    implementation("org.jcodec:jcodec-javase:0.2.5")
    implementation 'com.google.android.gms:play-services-vision:20.1.3'
    implementation platform('com.google.cloud:libraries-bom:26.43.0')
    implementation 'com.google.cloud:google-cloud-vision'
    implementation 'com.google.apis:google-api-services-vision:v1-rev20231219-2.0.0'
    implementation 'com.google.cloud:google-cloud-vision:3.41.0'
    implementation platform('com.google.cloud:libraries-bom:26.38.0')
    implementation 'com.google.cloud:google-cloud-storage'
    implementation "com.google.apis:google-api-services-vision:v1-rev20231219-2.0.0"
    implementation "com.google.auth:google-auth-library-oauth2-http:1.23.0"
    implementation "com.google.http-client:google-http-client-jackson2:1.44.2"
    implementation('org.jdesktop:beansbinding:1.2.1')
    // Groovy (Gradle)
    /*
        implementation "com.google.api-client:google-api-client:"
        implementation "com.google.http-client:google-http-client-gson:"
        implementation "com.google.apis:google-api-services-vision:v1-rev"
        implementation "com.google.auth:google-auth-library-oauth2-http:<version>"
    */}

tasks.register('javadocJar', Jar) {
    dependsOn javadoc
    archiveClassifier = "javadoc"
    from javadoc.destinationDir
}

configurations {
    desktopCompile
    androidCompile
    testCompile

    compileOnly.extendsFrom desktopCompile
    testOnly.extendsFrom desktopCompile

    desktop {
        extendsFrom desktopCompile
//        extendsFrom runtime
    }
    android {
        extendsFrom androidCompile
//        extendsFrom runtime
    }
    test {
        extendsFrom testCompile

    }
}

sourcesJar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.register('copyTask', Copy) {
    // duplicateStrategy = DuplicatesStrategy.WARN
    from 'src/main/java/'
    into 'build/classes/java/main'
}

java {
    withJavadocJar()
    withSourcesJar()
}
javadoc {
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}
tasks.named('jar') {
    manifest {
        attributes('Implementation-Title': project.name,
                'Implementation-Version': project.version)
    }
}

tasks.named("processTestResources") {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}
tasks.named("processResources") {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}
tasks.withType(Jar).configureEach {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}
tasks.register("publishAll") {
    dependsOn(getTasksByName("publishAllPublicationsToJetBrainsSpaceEmpty3Repository", true))
    dependsOn(getTasksByName("publishAllPublicationsToOSSRHRepository", true))
    dependsOn(getTasksByName("publishMavenPublicationToMavenLocal", true))
}

signing {
    def signingKey = load.get("signing.keyId")
    def signingPassword = load.get("signing.password")

    useGpgCmd()
    //useInMemoryPgpKeys(signingKey, signingPassword)

    //sign publishing.publications
    //sign configurations.archives
}

def versionName = version_date
publishing {
    publications {
        maven(MavenPublication) {
            groupId = 'one.empty3'
            artifactId = 'empty3-desktop-ux'
            version = version_date
            from components.java
            project.tasks.withType(Sign) {
                signatures.all {

                }
            }

            // The pom can be enriched as usual
            pom {
                name = 'empty3-desktop-ux'
                description = '3D rendering engine. Plus modelling. Expected glsl textures 3d and 2d rendering' +
                        '3D primitives, and a lot of scenes\' samples to test.' +
                        '+ Game Jogl reworked, Calculator (numbers and vectors). Java code parser implementation starts (<=1.2)'
                packaging 'jar'
                url = "https://github.com/manuelddahmen/empty3-desktop-ux"
                version version_date
                inceptionYear = '2024'
                licenses {
                    license {
                        name = "Apache version 2"
                        url = "https://www.apache.org/licenses/LICENSE-2.0"
                        distribution = "repo"
                    }
                }

                scm {

                    url = "https://github.com/manuelddahmen/empty3-desktop-ux"
                    connection = "scm:git:https://github.com/manuelddahmen/empty3-desktop-ux.git"
                    developerConnection = "scm:git:https://github.com/manuelddahmen/empty3-desktop-ux.git"

                }
                developers {
                    developer {
                        email = "manuel.dahmen@gmx.com"
                        name = "Manuel Daniel Dahmen"

                        url = "https://empty3.one"
                        id = "manuelddahmen"
                    }
                }

            }
        }
    }

    repositories {
        /*  maven {
              name = "JetBrainsSpaceEmpty3"
              url = "https://maven.pkg.jetbrains.space/empty3/p/empty3/maven/maven"
              credentials {
                  // Automation has a special account for authentication in Space
                  // account credentials are accessible via env vars
                  username = load.get("spaceUsername")
                  password = load.get("spacePassword")
              }

          }*/
        /*maven {
            name = "OSSRH"
            url = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                username = load.get("ossrhUsername")
                password = load.get("ossrhPassword")
            }

        }*/
/*
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/manuelddahmen/empty3_miror")
            credentials {
                username = load.get("GITHUB_ACTOR")
                password = load.get("GITHUB_TOKEN")
            }
        }*/
        maven {
            url = layout.buildDirectory.dir('staging-deploy')
        }

    }
}

jreleaser {
    signing {

        active = 'ALWAYS'
        armored = true
        mode = 'FILE'
        publicKey = load.get('signing.publicKeyPath')
        passphrase = load.get('signing.passphrase')
        secretKey = load.get('signing.secretKey')
        release.github.token = load.get('release.github.token')

    }
    project {
        name = 'empty3-desktop-ux'
        java.artifactId = 'empty3-desktop-ux'
        java.groupId = 'one.empty3'
        java.version = version_date
        version = version_date
        license = 'Apache-2.0'
        authors = ['Manuel D DAHMEN']
        description = '3D rendering engine. Plus modelling. Expected glsl-like textures 3d and rendering' +
                '3D primitives, and a lot of scenes\' samples to test.' +
                '+ Game Jogl reworked, Calculator (numbers and vectors). Java code parser implementation starts (<=1.2)'
        copyright = "Author : Manuel D. Dahmen, License: Apache-2"
        icon {
            // Publicly available URL. PNG format is preferred.
            //
            url = 'https://empty3.one/favicon.ico'
            // Marks this icon as the primary one.
            // Only a single icon may be set as primary.
            //
            primary = true
            // Image width in pixels.
            //
            width = 47
            // Image height in pixels.
            //
            height = 47
        }
    }

    deploy {
        maven {
            // Enable or disable all configured deployers.
            // Supported values are [`NEVER`, `ALWAYS`, `RELEASE`, `SNAPSHOT`].
            // Defaults to `ALWAYS`.
            //
            active = 'ALWAYS'
            pomchecker {
                // Defines the tool version to use.
                //
                version = '1.11.0'

                // Fail the release if pomchecker outputs a warning.
                // Defaults to `true`.
                //
                failOnWarning = false

                // Fail the release if pomchecker outputs an error.
                // Defaults to `true`.
                //
                failOnError = false
            }
            mavenCentral {
                app {
                    active = 'ALWAYS'
                    url = 'https://central.sonatype.com/api/v1/publisher'
                    gitRootSearch = false
                    stagingRepository('build/staging-deploy')
                    username = propertiesReleaseConfig.get('JRELEASER_MAVENCENTRAL_USERNAME')
                    authorization = 'BASIC'
                    // Password for login into the MAVENCENTRAL service.
                    //
                    password = propertiesReleaseConfig.get('JRELEASER_MAVENCENTRAL_PASSWORD')
                    // List of directories where staged artifacts can be found.

                    // Defines the connection timeout in seconds.
                    // Defaults to `20`.
                    //
                    connectTimeout = 20

                    // Defines the read timeout in seconds.
                    // Defaults to `60`.
                    //
                    readTimeout = 60


                    // Registered publication namespace.
                    // Defaults to `${project.java.groupId}`.
                    //
                    namespace = 'one.empty3'

                    // Deployment identifier used for publication.
                    //
                    deploymentId = 'd54226c8-5abd-4679-bc76-451c3ae38bfb'

                    // Time to wait between state transition checks, in seconds.
                    // Defaults to `10`.
                    //
                    retryDelay = 10

                    // Maximum number of attempts to verify state transition.
                    // Defaults to `60`.
                    //
                    maxRetries = 120
                }
            }
        }
    }
    upload {
        // Enable or disable all configured uploaders.
        // Supported values are [`NEVER`, `ALWAYS`, `RELEASE`, `SNAPSHOT`].
        // Defaults to `ALWAYS`.
        //
        active = 'ALWAYS'
    }
}
